// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
insert into users (
  user_id, handle, is_current
) values (
  $1, $2, true
)
returning blockhash, user_id, is_current, handle, wallet, name, profile_picture, cover_photo, bio, location, metadata_multihash, creator_node_endpoint, blocknumber, is_verified, created_at, updated_at, handle_lc, cover_photo_sizes, profile_picture_sizes, primary_id, secondary_ids, replica_set_update_signer, has_collectibles, txhash, playlist_library, is_deactivated, slot, user_storage_account, user_authority_account, artist_pick_track_id
`

type CreateUserParams struct {
	UserID int32          `db:"user_id" json:"user_id"`
	Handle sql.NullString `db:"handle" json:"handle"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.Handle)
	var i User
	err := row.Scan(
		&i.Blockhash,
		&i.UserID,
		&i.IsCurrent,
		&i.Handle,
		&i.Wallet,
		&i.Name,
		&i.ProfilePicture,
		&i.CoverPhoto,
		&i.Bio,
		&i.Location,
		&i.MetadataMultihash,
		&i.CreatorNodeEndpoint,
		&i.Blocknumber,
		&i.IsVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HandleLc,
		&i.CoverPhotoSizes,
		&i.ProfilePictureSizes,
		&i.PrimaryID,
		pq.Array(&i.SecondaryIds),
		&i.ReplicaSetUpdateSigner,
		&i.HasCollectibles,
		&i.Txhash,
		&i.PlaylistLibrary,
		&i.IsDeactivated,
		&i.Slot,
		&i.UserStorageAccount,
		&i.UserAuthorityAccount,
		&i.ArtistPickTrackID,
	)
	return i, err
}
