// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/tabbed/pqtype"
)

type Challengetype string

const (
	ChallengetypeBoolean   Challengetype = "boolean"
	ChallengetypeNumeric   Challengetype = "numeric"
	ChallengetypeAggregate Challengetype = "aggregate"
	ChallengetypeTrending  Challengetype = "trending"
)

func (e *Challengetype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Challengetype(s)
	case string:
		*e = Challengetype(s)
	default:
		return fmt.Errorf("unsupported scan type for Challengetype: %T", src)
	}
	return nil
}

type NullChallengetype struct {
	Challengetype Challengetype
	Valid         bool // Valid is true if Challengetype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChallengetype) Scan(value interface{}) error {
	if value == nil {
		ns.Challengetype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Challengetype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChallengetype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Challengetype, nil
}

type Reposttype string

const (
	ReposttypeTrack    Reposttype = "track"
	ReposttypePlaylist Reposttype = "playlist"
	ReposttypeAlbum    Reposttype = "album"
)

func (e *Reposttype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Reposttype(s)
	case string:
		*e = Reposttype(s)
	default:
		return fmt.Errorf("unsupported scan type for Reposttype: %T", src)
	}
	return nil
}

type NullReposttype struct {
	Reposttype Reposttype
	Valid      bool // Valid is true if Reposttype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReposttype) Scan(value interface{}) error {
	if value == nil {
		ns.Reposttype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Reposttype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReposttype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Reposttype, nil
}

type Savetype string

const (
	SavetypeTrack    Savetype = "track"
	SavetypePlaylist Savetype = "playlist"
	SavetypeAlbum    Savetype = "album"
)

func (e *Savetype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Savetype(s)
	case string:
		*e = Savetype(s)
	default:
		return fmt.Errorf("unsupported scan type for Savetype: %T", src)
	}
	return nil
}

type NullSavetype struct {
	Savetype Savetype
	Valid    bool // Valid is true if Savetype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSavetype) Scan(value interface{}) error {
	if value == nil {
		ns.Savetype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Savetype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSavetype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Savetype, nil
}

type Skippedtransactionlevel string

const (
	SkippedtransactionlevelNode    Skippedtransactionlevel = "node"
	SkippedtransactionlevelNetwork Skippedtransactionlevel = "network"
)

func (e *Skippedtransactionlevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Skippedtransactionlevel(s)
	case string:
		*e = Skippedtransactionlevel(s)
	default:
		return fmt.Errorf("unsupported scan type for Skippedtransactionlevel: %T", src)
	}
	return nil
}

type NullSkippedtransactionlevel struct {
	Skippedtransactionlevel Skippedtransactionlevel
	Valid                   bool // Valid is true if Skippedtransactionlevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSkippedtransactionlevel) Scan(value interface{}) error {
	if value == nil {
		ns.Skippedtransactionlevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Skippedtransactionlevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSkippedtransactionlevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Skippedtransactionlevel, nil
}

type WalletChain string

const (
	WalletChainEth WalletChain = "eth"
	WalletChainSol WalletChain = "sol"
)

func (e *WalletChain) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = WalletChain(s)
	case string:
		*e = WalletChain(s)
	default:
		return fmt.Errorf("unsupported scan type for WalletChain: %T", src)
	}
	return nil
}

type NullWalletChain struct {
	WalletChain WalletChain
	Valid       bool // Valid is true if WalletChain is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullWalletChain) Scan(value interface{}) error {
	if value == nil {
		ns.WalletChain, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.WalletChain.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullWalletChain) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.WalletChain, nil
}

type AggregateDailyAppNameMetric struct {
	ID              int32     `db:"id" json:"id"`
	ApplicationName string    `db:"application_name" json:"application_name"`
	Count           int32     `db:"count" json:"count"`
	Timestamp       time.Time `db:"timestamp" json:"timestamp"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time `db:"updated_at" json:"updated_at"`
}

type AggregateDailyTotalUsersMetric struct {
	ID        int32     `db:"id" json:"id"`
	Count     int32     `db:"count" json:"count"`
	Timestamp time.Time `db:"timestamp" json:"timestamp"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type AggregateDailyUniqueUsersMetric struct {
	ID          int32         `db:"id" json:"id"`
	Count       int32         `db:"count" json:"count"`
	Timestamp   time.Time     `db:"timestamp" json:"timestamp"`
	CreatedAt   time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time     `db:"updated_at" json:"updated_at"`
	SummedCount sql.NullInt32 `db:"summed_count" json:"summed_count"`
}

type AggregateIntervalPlay struct {
	TrackID           int32          `db:"track_id" json:"track_id"`
	Genre             sql.NullString `db:"genre" json:"genre"`
	CreatedAt         time.Time      `db:"created_at" json:"created_at"`
	WeekListenCounts  int64          `db:"week_listen_counts" json:"week_listen_counts"`
	MonthListenCounts int64          `db:"month_listen_counts" json:"month_listen_counts"`
}

type AggregateMonthlyAppNameMetric struct {
	ID              int32     `db:"id" json:"id"`
	ApplicationName string    `db:"application_name" json:"application_name"`
	Count           int32     `db:"count" json:"count"`
	Timestamp       time.Time `db:"timestamp" json:"timestamp"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time `db:"updated_at" json:"updated_at"`
}

type AggregateMonthlyPlay struct {
	PlayItemID int32     `db:"play_item_id" json:"play_item_id"`
	Timestamp  time.Time `db:"timestamp" json:"timestamp"`
	Count      int32     `db:"count" json:"count"`
}

type AggregateMonthlyTotalUsersMetric struct {
	ID        int32     `db:"id" json:"id"`
	Count     int32     `db:"count" json:"count"`
	Timestamp time.Time `db:"timestamp" json:"timestamp"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type AggregateMonthlyUniqueUsersMetric struct {
	ID          int32         `db:"id" json:"id"`
	Count       int32         `db:"count" json:"count"`
	Timestamp   time.Time     `db:"timestamp" json:"timestamp"`
	CreatedAt   time.Time     `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time     `db:"updated_at" json:"updated_at"`
	SummedCount sql.NullInt32 `db:"summed_count" json:"summed_count"`
}

type AggregatePlay struct {
	PlayItemID int32         `db:"play_item_id" json:"play_item_id"`
	Count      sql.NullInt64 `db:"count" json:"count"`
}

type AggregatePlaylist struct {
	PlaylistID  int32         `db:"playlist_id" json:"playlist_id"`
	IsAlbum     sql.NullBool  `db:"is_album" json:"is_album"`
	RepostCount sql.NullInt32 `db:"repost_count" json:"repost_count"`
	SaveCount   sql.NullInt32 `db:"save_count" json:"save_count"`
}

type AggregateTrack struct {
	TrackID     int32 `db:"track_id" json:"track_id"`
	RepostCount int32 `db:"repost_count" json:"repost_count"`
	SaveCount   int32 `db:"save_count" json:"save_count"`
}

type AggregateUser struct {
	UserID          int32         `db:"user_id" json:"user_id"`
	TrackCount      sql.NullInt64 `db:"track_count" json:"track_count"`
	PlaylistCount   sql.NullInt64 `db:"playlist_count" json:"playlist_count"`
	AlbumCount      sql.NullInt64 `db:"album_count" json:"album_count"`
	FollowerCount   sql.NullInt64 `db:"follower_count" json:"follower_count"`
	FollowingCount  sql.NullInt64 `db:"following_count" json:"following_count"`
	RepostCount     sql.NullInt64 `db:"repost_count" json:"repost_count"`
	TrackSaveCount  sql.NullInt64 `db:"track_save_count" json:"track_save_count"`
	SupporterCount  int32         `db:"supporter_count" json:"supporter_count"`
	SupportingCount int32         `db:"supporting_count" json:"supporting_count"`
}

type AggregateUserTip struct {
	SenderUserID   int32 `db:"sender_user_id" json:"sender_user_id"`
	ReceiverUserID int32 `db:"receiver_user_id" json:"receiver_user_id"`
	Amount         int64 `db:"amount" json:"amount"`
}

type AlembicVersion struct {
	VersionNum string `db:"version_num" json:"version_num"`
}

type AppNameMetric struct {
	ApplicationName string         `db:"application_name" json:"application_name"`
	Count           int32          `db:"count" json:"count"`
	Timestamp       time.Time      `db:"timestamp" json:"timestamp"`
	CreatedAt       time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time      `db:"updated_at" json:"updated_at"`
	ID              int64          `db:"id" json:"id"`
	Ip              sql.NullString `db:"ip" json:"ip"`
}

type AppNameMetricsAllTime struct {
	Name  string `db:"name" json:"name"`
	Count int64  `db:"count" json:"count"`
}

type AppNameMetricsTrailingMonth struct {
	Name  string `db:"name" json:"name"`
	Count int64  `db:"count" json:"count"`
}

type AppNameMetricsTrailingWeek struct {
	Name  string `db:"name" json:"name"`
	Count int64  `db:"count" json:"count"`
}

type AssociatedWallet struct {
	ID          int32       `db:"id" json:"id"`
	UserID      int32       `db:"user_id" json:"user_id"`
	Wallet      string      `db:"wallet" json:"wallet"`
	Blockhash   string      `db:"blockhash" json:"blockhash"`
	Blocknumber int32       `db:"blocknumber" json:"blocknumber"`
	IsCurrent   bool        `db:"is_current" json:"is_current"`
	IsDelete    bool        `db:"is_delete" json:"is_delete"`
	Chain       WalletChain `db:"chain" json:"chain"`
}

type AudioTransactionsHistory struct {
	UserBank             string         `db:"user_bank" json:"user_bank"`
	Slot                 int32          `db:"slot" json:"slot"`
	Signature            string         `db:"signature" json:"signature"`
	TransactionType      string         `db:"transaction_type" json:"transaction_type"`
	Method               string         `db:"method" json:"method"`
	CreatedAt            time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt            time.Time      `db:"updated_at" json:"updated_at"`
	TransactionCreatedAt time.Time      `db:"transaction_created_at" json:"transaction_created_at"`
	Change               string         `db:"change" json:"change"`
	Balance              string         `db:"balance" json:"balance"`
	TxMetadata           sql.NullString `db:"tx_metadata" json:"tx_metadata"`
}

type AudiusDataTx struct {
	Signature string `db:"signature" json:"signature"`
	Slot      int32  `db:"slot" json:"slot"`
}

type Block struct {
	Blockhash  string         `db:"blockhash" json:"blockhash"`
	Parenthash sql.NullString `db:"parenthash" json:"parenthash"`
	IsCurrent  sql.NullBool   `db:"is_current" json:"is_current"`
	Number     sql.NullInt32  `db:"number" json:"number"`
}

type BlocksCopy struct {
	Blockhash  string         `db:"blockhash" json:"blockhash"`
	Parenthash sql.NullString `db:"parenthash" json:"parenthash"`
	IsCurrent  sql.NullBool   `db:"is_current" json:"is_current"`
	Number     sql.NullInt32  `db:"number" json:"number"`
}

type Challenge struct {
	ID            string        `db:"id" json:"id"`
	Type          Challengetype `db:"type" json:"type"`
	Amount        string        `db:"amount" json:"amount"`
	Active        bool          `db:"active" json:"active"`
	StepCount     sql.NullInt32 `db:"step_count" json:"step_count"`
	StartingBlock sql.NullInt32 `db:"starting_block" json:"starting_block"`
}

type ChallengeDisbursement struct {
	ChallengeID string `db:"challenge_id" json:"challenge_id"`
	UserID      int32  `db:"user_id" json:"user_id"`
	Specifier   string `db:"specifier" json:"specifier"`
	Signature   string `db:"signature" json:"signature"`
	Slot        int32  `db:"slot" json:"slot"`
	Amount      string `db:"amount" json:"amount"`
}

type ChallengeListenStreak struct {
	UserID         int32        `db:"user_id" json:"user_id"`
	LastListenDate sql.NullTime `db:"last_listen_date" json:"last_listen_date"`
	ListenStreak   int32        `db:"listen_streak" json:"listen_streak"`
}

type ChallengeProfileCompletion struct {
	UserID             int32 `db:"user_id" json:"user_id"`
	ProfileDescription bool  `db:"profile_description" json:"profile_description"`
	ProfileName        bool  `db:"profile_name" json:"profile_name"`
	ProfilePicture     bool  `db:"profile_picture" json:"profile_picture"`
	ProfileCoverPhoto  bool  `db:"profile_cover_photo" json:"profile_cover_photo"`
	Follows            bool  `db:"follows" json:"follows"`
	Favorites          bool  `db:"favorites" json:"favorites"`
	Reposts            bool  `db:"reposts" json:"reposts"`
}

type Chat struct {
	ChatID        string    `db:"chat_id" json:"chat_id"`
	CreatedAt     time.Time `db:"created_at" json:"created_at"`
	LastMessageAt time.Time `db:"last_message_at" json:"last_message_at"`
}

type ChatBlockedUser struct {
	BlockerUserID int32     `db:"blocker_user_id" json:"blocker_user_id"`
	BlockeeUserID int32     `db:"blockee_user_id" json:"blockee_user_id"`
	CreatedAt     time.Time `db:"created_at" json:"created_at"`
}

type ChatMember struct {
	ChatID           string       `db:"chat_id" json:"chat_id"`
	UserID           int32        `db:"user_id" json:"user_id"`
	ClearedHistoryAt sql.NullTime `db:"cleared_history_at" json:"cleared_history_at"`
	InvitedByUserID  int32        `db:"invited_by_user_id" json:"invited_by_user_id"`
	InviteCode       string       `db:"invite_code" json:"invite_code"`
	LastActiveAt     sql.NullTime `db:"last_active_at" json:"last_active_at"`
	UnreadCount      int32        `db:"unread_count" json:"unread_count"`
}

type ChatMessage struct {
	MessageID  string    `db:"message_id" json:"message_id"`
	ChatID     string    `db:"chat_id" json:"chat_id"`
	UserID     int32     `db:"user_id" json:"user_id"`
	CreatedAt  time.Time `db:"created_at" json:"created_at"`
	Ciphertext string    `db:"ciphertext" json:"ciphertext"`
}

type ChatMessageReaction struct {
	UserID    int32     `db:"user_id" json:"user_id"`
	MessageID string    `db:"message_id" json:"message_id"`
	Reaction  string    `db:"reaction" json:"reaction"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type ChatPermission struct {
	UserID  int32          `db:"user_id" json:"user_id"`
	Permits sql.NullString `db:"permits" json:"permits"`
}

type EthBlock struct {
	LastScannedBlock int32     `db:"last_scanned_block" json:"last_scanned_block"`
	CreatedAt        time.Time `db:"created_at" json:"created_at"`
	UpdatedAt        time.Time `db:"updated_at" json:"updated_at"`
}

type Follow struct {
	Blockhash      sql.NullString `db:"blockhash" json:"blockhash"`
	Blocknumber    sql.NullInt32  `db:"blocknumber" json:"blocknumber"`
	FollowerUserID int32          `db:"follower_user_id" json:"follower_user_id"`
	FolloweeUserID int32          `db:"followee_user_id" json:"followee_user_id"`
	IsCurrent      bool           `db:"is_current" json:"is_current"`
	IsDelete       bool           `db:"is_delete" json:"is_delete"`
	CreatedAt      time.Time      `db:"created_at" json:"created_at"`
	Txhash         string         `db:"txhash" json:"txhash"`
	Slot           sql.NullInt32  `db:"slot" json:"slot"`
}

type HourlyPlayCount struct {
	HourlyTimestamp time.Time `db:"hourly_timestamp" json:"hourly_timestamp"`
	PlayCount       int32     `db:"play_count" json:"play_count"`
}

type IndexingCheckpoint struct {
	Tablename      string         `db:"tablename" json:"tablename"`
	LastCheckpoint int32          `db:"last_checkpoint" json:"last_checkpoint"`
	Signature      sql.NullString `db:"signature" json:"signature"`
}

type Milestone struct {
	ID          int32         `db:"id" json:"id"`
	Name        string        `db:"name" json:"name"`
	Threshold   int32         `db:"threshold" json:"threshold"`
	Blocknumber sql.NullInt32 `db:"blocknumber" json:"blocknumber"`
	Slot        sql.NullInt32 `db:"slot" json:"slot"`
	Timestamp   time.Time     `db:"timestamp" json:"timestamp"`
}

type Notification struct {
	ID                  int32                 `db:"id" json:"id"`
	Specifier           string                `db:"specifier" json:"specifier"`
	GroupID             string                `db:"group_id" json:"group_id"`
	NotificationGroupID sql.NullInt32         `db:"notification_group_id" json:"notification_group_id"`
	Type                string                `db:"type" json:"type"`
	Slot                sql.NullInt32         `db:"slot" json:"slot"`
	Blocknumber         sql.NullInt32         `db:"blocknumber" json:"blocknumber"`
	Timestamp           time.Time             `db:"timestamp" json:"timestamp"`
	Data                pqtype.NullRawMessage `db:"data" json:"data"`
	UserIds             []int32               `db:"user_ids" json:"user_ids"`
}

type NotificationGroup struct {
	ID             int32         `db:"id" json:"id"`
	NotificationID sql.NullInt32 `db:"notification_id" json:"notification_id"`
	Slot           sql.NullInt32 `db:"slot" json:"slot"`
	Blocknumber    sql.NullInt32 `db:"blocknumber" json:"blocknumber"`
	UserID         int32         `db:"user_id" json:"user_id"`
	Timestamp      time.Time     `db:"timestamp" json:"timestamp"`
}

type Play struct {
	ID         int32          `db:"id" json:"id"`
	UserID     sql.NullInt32  `db:"user_id" json:"user_id"`
	Source     sql.NullString `db:"source" json:"source"`
	PlayItemID int32          `db:"play_item_id" json:"play_item_id"`
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time      `db:"updated_at" json:"updated_at"`
	Slot       sql.NullInt32  `db:"slot" json:"slot"`
	Signature  sql.NullString `db:"signature" json:"signature"`
	City       sql.NullString `db:"city" json:"city"`
	Region     sql.NullString `db:"region" json:"region"`
	Country    sql.NullString `db:"country" json:"country"`
}

type Playlist struct {
	Blockhash                   sql.NullString  `db:"blockhash" json:"blockhash"`
	Blocknumber                 sql.NullInt32   `db:"blocknumber" json:"blocknumber"`
	PlaylistID                  int32           `db:"playlist_id" json:"playlist_id"`
	PlaylistOwnerID             int32           `db:"playlist_owner_id" json:"playlist_owner_id"`
	IsAlbum                     bool            `db:"is_album" json:"is_album"`
	IsPrivate                   bool            `db:"is_private" json:"is_private"`
	PlaylistName                sql.NullString  `db:"playlist_name" json:"playlist_name"`
	PlaylistContents            json.RawMessage `db:"playlist_contents" json:"playlist_contents"`
	PlaylistImageMultihash      sql.NullString  `db:"playlist_image_multihash" json:"playlist_image_multihash"`
	IsCurrent                   bool            `db:"is_current" json:"is_current"`
	IsDelete                    bool            `db:"is_delete" json:"is_delete"`
	Description                 sql.NullString  `db:"description" json:"description"`
	CreatedAt                   time.Time       `db:"created_at" json:"created_at"`
	Upc                         sql.NullString  `db:"upc" json:"upc"`
	UpdatedAt                   time.Time       `db:"updated_at" json:"updated_at"`
	PlaylistImageSizesMultihash sql.NullString  `db:"playlist_image_sizes_multihash" json:"playlist_image_sizes_multihash"`
	Txhash                      string          `db:"txhash" json:"txhash"`
	LastAddedTo                 sql.NullTime    `db:"last_added_to" json:"last_added_to"`
	Slot                        sql.NullInt32   `db:"slot" json:"slot"`
	MetadataMultihash           sql.NullString  `db:"metadata_multihash" json:"metadata_multihash"`
}

type PlaylistRoute struct {
	Slug        string `db:"slug" json:"slug"`
	TitleSlug   string `db:"title_slug" json:"title_slug"`
	CollisionID int32  `db:"collision_id" json:"collision_id"`
	OwnerID     int32  `db:"owner_id" json:"owner_id"`
	PlaylistID  int32  `db:"playlist_id" json:"playlist_id"`
	IsCurrent   bool   `db:"is_current" json:"is_current"`
	Blockhash   string `db:"blockhash" json:"blockhash"`
	Blocknumber int32  `db:"blocknumber" json:"blocknumber"`
	Txhash      string `db:"txhash" json:"txhash"`
}

type PlaysArchive struct {
	ID         int32          `db:"id" json:"id"`
	UserID     sql.NullInt32  `db:"user_id" json:"user_id"`
	Source     sql.NullString `db:"source" json:"source"`
	PlayItemID int32          `db:"play_item_id" json:"play_item_id"`
	CreatedAt  time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time      `db:"updated_at" json:"updated_at"`
	Slot       sql.NullInt32  `db:"slot" json:"slot"`
	Signature  sql.NullString `db:"signature" json:"signature"`
	ArchivedAt sql.NullTime   `db:"archived_at" json:"archived_at"`
}

type Reaction struct {
	ID            int32          `db:"id" json:"id"`
	Slot          int32          `db:"slot" json:"slot"`
	ReactionValue int32          `db:"reaction_value" json:"reaction_value"`
	SenderWallet  string         `db:"sender_wallet" json:"sender_wallet"`
	ReactionType  string         `db:"reaction_type" json:"reaction_type"`
	ReactedTo     string         `db:"reacted_to" json:"reacted_to"`
	Timestamp     time.Time      `db:"timestamp" json:"timestamp"`
	TxSignature   sql.NullString `db:"tx_signature" json:"tx_signature"`
}

type RelatedArtist struct {
	UserID              int32     `db:"user_id" json:"user_id"`
	RelatedArtistUserID int32     `db:"related_artist_user_id" json:"related_artist_user_id"`
	Score               float64   `db:"score" json:"score"`
	CreatedAt           time.Time `db:"created_at" json:"created_at"`
}

type Remix struct {
	ParentTrackID int32 `db:"parent_track_id" json:"parent_track_id"`
	ChildTrackID  int32 `db:"child_track_id" json:"child_track_id"`
}

type Repost struct {
	Blockhash    sql.NullString `db:"blockhash" json:"blockhash"`
	Blocknumber  sql.NullInt32  `db:"blocknumber" json:"blocknumber"`
	UserID       int32          `db:"user_id" json:"user_id"`
	RepostItemID int32          `db:"repost_item_id" json:"repost_item_id"`
	RepostType   Reposttype     `db:"repost_type" json:"repost_type"`
	IsCurrent    bool           `db:"is_current" json:"is_current"`
	IsDelete     bool           `db:"is_delete" json:"is_delete"`
	CreatedAt    time.Time      `db:"created_at" json:"created_at"`
	Txhash       string         `db:"txhash" json:"txhash"`
	Slot         sql.NullInt32  `db:"slot" json:"slot"`
}

type RewardManagerTx struct {
	Signature string    `db:"signature" json:"signature"`
	Slot      int32     `db:"slot" json:"slot"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type RewardsManagerBackfillTx struct {
	Signature string    `db:"signature" json:"signature"`
	Slot      int32     `db:"slot" json:"slot"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type RouteMetric struct {
	RoutePath   string         `db:"route_path" json:"route_path"`
	Version     string         `db:"version" json:"version"`
	QueryString string         `db:"query_string" json:"query_string"`
	Count       int32          `db:"count" json:"count"`
	Timestamp   time.Time      `db:"timestamp" json:"timestamp"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time      `db:"updated_at" json:"updated_at"`
	ID          int64          `db:"id" json:"id"`
	Ip          sql.NullString `db:"ip" json:"ip"`
}

type RouteMetricsAllTime struct {
	UniqueCount int64 `db:"unique_count" json:"unique_count"`
	Count       int64 `db:"count" json:"count"`
}

type RouteMetricsDayBucket struct {
	UniqueCount int64 `db:"unique_count" json:"unique_count"`
	Count       int64 `db:"count" json:"count"`
	Time        int64 `db:"time" json:"time"`
}

type RouteMetricsMonthBucket struct {
	UniqueCount int64 `db:"unique_count" json:"unique_count"`
	Count       int64 `db:"count" json:"count"`
	Time        int64 `db:"time" json:"time"`
}

type RouteMetricsTrailingMonth struct {
	UniqueCount int64 `db:"unique_count" json:"unique_count"`
	Count       int64 `db:"count" json:"count"`
}

type RouteMetricsTrailingWeek struct {
	UniqueCount int64 `db:"unique_count" json:"unique_count"`
	Count       int64 `db:"count" json:"count"`
}

type RpcLog struct {
	JetstreamSequence  int32           `db:"jetstream_sequence" json:"jetstream_sequence"`
	JetstreamTimestamp time.Time       `db:"jetstream_timestamp" json:"jetstream_timestamp"`
	FromWallet         sql.NullString  `db:"from_wallet" json:"from_wallet"`
	Rpc                json.RawMessage `db:"rpc" json:"rpc"`
	Sig                string          `db:"sig" json:"sig"`
}

type Save struct {
	Blockhash   sql.NullString `db:"blockhash" json:"blockhash"`
	Blocknumber sql.NullInt32  `db:"blocknumber" json:"blocknumber"`
	UserID      int32          `db:"user_id" json:"user_id"`
	SaveItemID  int32          `db:"save_item_id" json:"save_item_id"`
	SaveType    Savetype       `db:"save_type" json:"save_type"`
	IsCurrent   bool           `db:"is_current" json:"is_current"`
	IsDelete    bool           `db:"is_delete" json:"is_delete"`
	CreatedAt   time.Time      `db:"created_at" json:"created_at"`
	Txhash      string         `db:"txhash" json:"txhash"`
	Slot        sql.NullInt32  `db:"slot" json:"slot"`
}

type SchemaMigration struct {
	Version string `db:"version" json:"version"`
}

type SkippedTransaction struct {
	ID          int32                   `db:"id" json:"id"`
	Blocknumber int32                   `db:"blocknumber" json:"blocknumber"`
	Blockhash   string                  `db:"blockhash" json:"blockhash"`
	Txhash      string                  `db:"txhash" json:"txhash"`
	CreatedAt   time.Time               `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time               `db:"updated_at" json:"updated_at"`
	Level       Skippedtransactionlevel `db:"level" json:"level"`
}

type SplTokenBackfillTx struct {
	LastScannedSlot int32     `db:"last_scanned_slot" json:"last_scanned_slot"`
	Signature       string    `db:"signature" json:"signature"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time `db:"updated_at" json:"updated_at"`
}

type SplTokenTx struct {
	LastScannedSlot int32     `db:"last_scanned_slot" json:"last_scanned_slot"`
	Signature       string    `db:"signature" json:"signature"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time `db:"updated_at" json:"updated_at"`
}

type Stem struct {
	ParentTrackID int32 `db:"parent_track_id" json:"parent_track_id"`
	ChildTrackID  int32 `db:"child_track_id" json:"child_track_id"`
}

type Subscription struct {
	Blockhash    sql.NullString `db:"blockhash" json:"blockhash"`
	Blocknumber  sql.NullInt32  `db:"blocknumber" json:"blocknumber"`
	SubscriberID int32          `db:"subscriber_id" json:"subscriber_id"`
	UserID       int32          `db:"user_id" json:"user_id"`
	IsCurrent    bool           `db:"is_current" json:"is_current"`
	IsDelete     bool           `db:"is_delete" json:"is_delete"`
	CreatedAt    time.Time      `db:"created_at" json:"created_at"`
	Txhash       string         `db:"txhash" json:"txhash"`
}

type SupporterRankUp struct {
	Slot           int32 `db:"slot" json:"slot"`
	SenderUserID   int32 `db:"sender_user_id" json:"sender_user_id"`
	ReceiverUserID int32 `db:"receiver_user_id" json:"receiver_user_id"`
	Rank           int32 `db:"rank" json:"rank"`
}

type TagTrackUser struct {
	Tag     interface{} `db:"tag" json:"tag"`
	TrackID int32       `db:"track_id" json:"track_id"`
	OwnerID int32       `db:"owner_id" json:"owner_id"`
}

type Track struct {
	Blockhash         sql.NullString        `db:"blockhash" json:"blockhash"`
	TrackID           int32                 `db:"track_id" json:"track_id"`
	IsCurrent         bool                  `db:"is_current" json:"is_current"`
	IsDelete          bool                  `db:"is_delete" json:"is_delete"`
	OwnerID           int32                 `db:"owner_id" json:"owner_id"`
	Title             sql.NullString        `db:"title" json:"title"`
	Length            sql.NullInt32         `db:"length" json:"length"`
	CoverArt          sql.NullString        `db:"cover_art" json:"cover_art"`
	Tags              sql.NullString        `db:"tags" json:"tags"`
	Genre             sql.NullString        `db:"genre" json:"genre"`
	Mood              sql.NullString        `db:"mood" json:"mood"`
	CreditsSplits     sql.NullString        `db:"credits_splits" json:"credits_splits"`
	CreateDate        sql.NullString        `db:"create_date" json:"create_date"`
	ReleaseDate       sql.NullString        `db:"release_date" json:"release_date"`
	FileType          sql.NullString        `db:"file_type" json:"file_type"`
	MetadataMultihash sql.NullString        `db:"metadata_multihash" json:"metadata_multihash"`
	Blocknumber       sql.NullInt32         `db:"blocknumber" json:"blocknumber"`
	TrackSegments     json.RawMessage       `db:"track_segments" json:"track_segments"`
	CreatedAt         time.Time             `db:"created_at" json:"created_at"`
	Description       sql.NullString        `db:"description" json:"description"`
	Isrc              sql.NullString        `db:"isrc" json:"isrc"`
	Iswc              sql.NullString        `db:"iswc" json:"iswc"`
	License           sql.NullString        `db:"license" json:"license"`
	UpdatedAt         time.Time             `db:"updated_at" json:"updated_at"`
	CoverArtSizes     sql.NullString        `db:"cover_art_sizes" json:"cover_art_sizes"`
	Download          pqtype.NullRawMessage `db:"download" json:"download"`
	IsUnlisted        bool                  `db:"is_unlisted" json:"is_unlisted"`
	FieldVisibility   pqtype.NullRawMessage `db:"field_visibility" json:"field_visibility"`
	RouteID           sql.NullString        `db:"route_id" json:"route_id"`
	StemOf            pqtype.NullRawMessage `db:"stem_of" json:"stem_of"`
	RemixOf           pqtype.NullRawMessage `db:"remix_of" json:"remix_of"`
	Txhash            string                `db:"txhash" json:"txhash"`
	Slot              sql.NullInt32         `db:"slot" json:"slot"`
	IsAvailable       bool                  `db:"is_available" json:"is_available"`
	IsPremium         bool                  `db:"is_premium" json:"is_premium"`
	PremiumConditions pqtype.NullRawMessage `db:"premium_conditions" json:"premium_conditions"`
}

type TrackRoute struct {
	Slug        string `db:"slug" json:"slug"`
	TitleSlug   string `db:"title_slug" json:"title_slug"`
	CollisionID int32  `db:"collision_id" json:"collision_id"`
	OwnerID     int32  `db:"owner_id" json:"owner_id"`
	TrackID     int32  `db:"track_id" json:"track_id"`
	IsCurrent   bool   `db:"is_current" json:"is_current"`
	Blockhash   string `db:"blockhash" json:"blockhash"`
	Blocknumber int32  `db:"blocknumber" json:"blocknumber"`
	Txhash      string `db:"txhash" json:"txhash"`
}

type TrackTrendingScore struct {
	TrackID   int32          `db:"track_id" json:"track_id"`
	Type      string         `db:"type" json:"type"`
	Genre     sql.NullString `db:"genre" json:"genre"`
	Version   string         `db:"version" json:"version"`
	TimeRange string         `db:"time_range" json:"time_range"`
	Score     float64        `db:"score" json:"score"`
	CreatedAt time.Time      `db:"created_at" json:"created_at"`
}

type TrendingParam struct {
	TrackID            int32          `db:"track_id" json:"track_id"`
	Genre              sql.NullString `db:"genre" json:"genre"`
	OwnerID            int32          `db:"owner_id" json:"owner_id"`
	PlayCount          sql.NullInt64  `db:"play_count" json:"play_count"`
	OwnerFollowerCount sql.NullInt64  `db:"owner_follower_count" json:"owner_follower_count"`
	RepostCount        int32          `db:"repost_count" json:"repost_count"`
	SaveCount          int32          `db:"save_count" json:"save_count"`
	RepostWeekCount    int64          `db:"repost_week_count" json:"repost_week_count"`
	RepostMonthCount   int64          `db:"repost_month_count" json:"repost_month_count"`
	RepostYearCount    int64          `db:"repost_year_count" json:"repost_year_count"`
	SaveWeekCount      int64          `db:"save_week_count" json:"save_week_count"`
	SaveMonthCount     int64          `db:"save_month_count" json:"save_month_count"`
	SaveYearCount      int64          `db:"save_year_count" json:"save_year_count"`
	Karma              int64          `db:"karma" json:"karma"`
}

type TrendingResult struct {
	UserID  int32          `db:"user_id" json:"user_id"`
	ID      sql.NullString `db:"id" json:"id"`
	Rank    int32          `db:"rank" json:"rank"`
	Type    string         `db:"type" json:"type"`
	Version string         `db:"version" json:"version"`
	Week    time.Time      `db:"week" json:"week"`
}

type UrsmContentNode struct {
	Blockhash                    sql.NullString `db:"blockhash" json:"blockhash"`
	Blocknumber                  sql.NullInt32  `db:"blocknumber" json:"blocknumber"`
	CreatedAt                    time.Time      `db:"created_at" json:"created_at"`
	IsCurrent                    bool           `db:"is_current" json:"is_current"`
	CnodeSpID                    int32          `db:"cnode_sp_id" json:"cnode_sp_id"`
	DelegateOwnerWallet          string         `db:"delegate_owner_wallet" json:"delegate_owner_wallet"`
	OwnerWallet                  string         `db:"owner_wallet" json:"owner_wallet"`
	ProposerSpIds                []int32        `db:"proposer_sp_ids" json:"proposer_sp_ids"`
	Proposer1DelegateOwnerWallet string         `db:"proposer_1_delegate_owner_wallet" json:"proposer_1_delegate_owner_wallet"`
	Proposer2DelegateOwnerWallet string         `db:"proposer_2_delegate_owner_wallet" json:"proposer_2_delegate_owner_wallet"`
	Proposer3DelegateOwnerWallet string         `db:"proposer_3_delegate_owner_wallet" json:"proposer_3_delegate_owner_wallet"`
	Endpoint                     sql.NullString `db:"endpoint" json:"endpoint"`
	Txhash                       string         `db:"txhash" json:"txhash"`
	Slot                         sql.NullInt32  `db:"slot" json:"slot"`
}

type User struct {
	Blockhash              sql.NullString        `db:"blockhash" json:"blockhash"`
	UserID                 int32                 `db:"user_id" json:"user_id"`
	IsCurrent              bool                  `db:"is_current" json:"is_current"`
	Handle                 sql.NullString        `db:"handle" json:"handle"`
	Wallet                 sql.NullString        `db:"wallet" json:"wallet"`
	Name                   sql.NullString        `db:"name" json:"name"`
	ProfilePicture         sql.NullString        `db:"profile_picture" json:"profile_picture"`
	CoverPhoto             sql.NullString        `db:"cover_photo" json:"cover_photo"`
	Bio                    sql.NullString        `db:"bio" json:"bio"`
	Location               sql.NullString        `db:"location" json:"location"`
	MetadataMultihash      sql.NullString        `db:"metadata_multihash" json:"metadata_multihash"`
	CreatorNodeEndpoint    sql.NullString        `db:"creator_node_endpoint" json:"creator_node_endpoint"`
	Blocknumber            sql.NullInt32         `db:"blocknumber" json:"blocknumber"`
	IsVerified             bool                  `db:"is_verified" json:"is_verified"`
	CreatedAt              time.Time             `db:"created_at" json:"created_at"`
	UpdatedAt              time.Time             `db:"updated_at" json:"updated_at"`
	HandleLc               sql.NullString        `db:"handle_lc" json:"handle_lc"`
	CoverPhotoSizes        sql.NullString        `db:"cover_photo_sizes" json:"cover_photo_sizes"`
	ProfilePictureSizes    sql.NullString        `db:"profile_picture_sizes" json:"profile_picture_sizes"`
	PrimaryID              sql.NullInt32         `db:"primary_id" json:"primary_id"`
	SecondaryIds           []int32               `db:"secondary_ids" json:"secondary_ids"`
	ReplicaSetUpdateSigner sql.NullString        `db:"replica_set_update_signer" json:"replica_set_update_signer"`
	HasCollectibles        bool                  `db:"has_collectibles" json:"has_collectibles"`
	Txhash                 string                `db:"txhash" json:"txhash"`
	PlaylistLibrary        pqtype.NullRawMessage `db:"playlist_library" json:"playlist_library"`
	IsDeactivated          bool                  `db:"is_deactivated" json:"is_deactivated"`
	Slot                   sql.NullInt32         `db:"slot" json:"slot"`
	UserStorageAccount     sql.NullString        `db:"user_storage_account" json:"user_storage_account"`
	UserAuthorityAccount   sql.NullString        `db:"user_authority_account" json:"user_authority_account"`
	ArtistPickTrackID      sql.NullInt32         `db:"artist_pick_track_id" json:"artist_pick_track_id"`
}

type UserBalance struct {
	UserID                      int32          `db:"user_id" json:"user_id"`
	Balance                     string         `db:"balance" json:"balance"`
	CreatedAt                   time.Time      `db:"created_at" json:"created_at"`
	UpdatedAt                   time.Time      `db:"updated_at" json:"updated_at"`
	AssociatedWalletsBalance    string         `db:"associated_wallets_balance" json:"associated_wallets_balance"`
	Waudio                      sql.NullString `db:"waudio" json:"waudio"`
	AssociatedSolWalletsBalance string         `db:"associated_sol_wallets_balance" json:"associated_sol_wallets_balance"`
}

type UserBalanceChange struct {
	UserID          int32     `db:"user_id" json:"user_id"`
	Blocknumber     int32     `db:"blocknumber" json:"blocknumber"`
	CurrentBalance  string    `db:"current_balance" json:"current_balance"`
	PreviousBalance string    `db:"previous_balance" json:"previous_balance"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
	UpdatedAt       time.Time `db:"updated_at" json:"updated_at"`
}

type UserBankAccount struct {
	Signature       string    `db:"signature" json:"signature"`
	EthereumAddress string    `db:"ethereum_address" json:"ethereum_address"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
	BankAccount     string    `db:"bank_account" json:"bank_account"`
}

type UserBankBackfillTx struct {
	Signature string    `db:"signature" json:"signature"`
	Slot      int32     `db:"slot" json:"slot"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type UserBankTx struct {
	Signature string    `db:"signature" json:"signature"`
	Slot      int32     `db:"slot" json:"slot"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type UserChallenge struct {
	ChallengeID          string        `db:"challenge_id" json:"challenge_id"`
	UserID               int32         `db:"user_id" json:"user_id"`
	Specifier            string        `db:"specifier" json:"specifier"`
	IsComplete           bool          `db:"is_complete" json:"is_complete"`
	CurrentStepCount     sql.NullInt32 `db:"current_step_count" json:"current_step_count"`
	CompletedBlocknumber sql.NullInt32 `db:"completed_blocknumber" json:"completed_blocknumber"`
}

type UserEvent struct {
	ID           int32          `db:"id" json:"id"`
	Blockhash    sql.NullString `db:"blockhash" json:"blockhash"`
	Blocknumber  sql.NullInt32  `db:"blocknumber" json:"blocknumber"`
	IsCurrent    bool           `db:"is_current" json:"is_current"`
	UserID       int32          `db:"user_id" json:"user_id"`
	Referrer     sql.NullInt32  `db:"referrer" json:"referrer"`
	IsMobileUser bool           `db:"is_mobile_user" json:"is_mobile_user"`
	Slot         sql.NullInt32  `db:"slot" json:"slot"`
}

type UserListeningHistory struct {
	UserID           int32           `db:"user_id" json:"user_id"`
	ListeningHistory json.RawMessage `db:"listening_history" json:"listening_history"`
}

type UserTip struct {
	Slot           int32     `db:"slot" json:"slot"`
	Signature      string    `db:"signature" json:"signature"`
	SenderUserID   int32     `db:"sender_user_id" json:"sender_user_id"`
	ReceiverUserID int32     `db:"receiver_user_id" json:"receiver_user_id"`
	Amount         int64     `db:"amount" json:"amount"`
	CreatedAt      time.Time `db:"created_at" json:"created_at"`
	UpdatedAt      time.Time `db:"updated_at" json:"updated_at"`
}
