#!/usr/bin/env python3

import json
import os
import pathlib
import subprocess
import sys
import urllib.request

import click
import dotenv
import eth_account
import solana.keypair


class DefaultCommandGroup(click.Group):
    """allow a default command for a group"""

    def command(self, *args, **kwargs):
        default_command = kwargs.pop('default_command', False)
        if default_command and not args:
            kwargs['name'] = kwargs.get('name', '<>')
        decorator = super(
            DefaultCommandGroup, self).command(*args, **kwargs)

        if default_command:
            def new_decorator(f):
                cmd = decorator(f)
                self.default_command = cmd.name
                return cmd

            return new_decorator

        return decorator

    def resolve_command(self, ctx, args):
        try:
            # test if the command parses
            return super(
                DefaultCommandGroup, self).resolve_command(ctx, args)
        except click.UsageError:
            # command did not parse, assume it is the default command
            args.insert(0, self.default_command)
            return super(
                DefaultCommandGroup, self).resolve_command(ctx, args)


def generate_env(
    protocol_dir,
    creator_node_replicas,
    discovery_provider_replicas,
    elasticsearch_replicas,
):
    config = {}
    if (protocol_dir / "dev-tools/config.json").exists():
        config = json.load((protocol_dir / "dev-tools/config.json").open())

    env = {}

    env["GIT_COMMIT"] = (
        subprocess.run(
            ["git", f"--git-dir={protocol_dir / '.git'}", "rev-parse", "HEAD"],
            capture_output=True,
            check=True,
        )
        .stdout.decode()
        .strip()
    )

    env["CREATOR_NODE_REPLICAS"] = str(creator_node_replicas)

    env["DISCOVERY_PROVIDER_REPLICAS"] = str(discovery_provider_replicas)

    env["CONTENT_NODE_VERSION"] = json.loads(
        (protocol_dir / "creator-node/.version.json").read_text(),
    )["version"]

    env["DISCOVERY_NODE_VERSION"] = json.loads(
        (protocol_dir / "discovery-provider/.version.json").read_text(),
    )["version"]

    env["ELASTICSEARCH_REPLICAS"] = str(elasticsearch_replicas)
    if elasticsearch_replicas:
        env["ELASTICSEARCH_CONDITION"] = "service_healthy"
    else:  # exists to prevent discovery provider from waiting for non-existent elasticsearch instances
        env["ELASTICSEARCH_CONDITION"] = "service_started"

    for name, secret_key in config.get("solana-accounts", {}).items():
        keypair = solana.keypair.Keypair.from_secret_key(bytes(secret_key))
        env[f"{name}_SECRET_KEY"] = json.dumps(list(keypair.secret_key))
        env[f"{name}_PUBLIC_KEY"] = keypair.public_key.to_base58().decode()

    eth_relayer_wallets = []
    poa_relayer_wallets = []

    for name, private_key in config.get("eth-accounts", {}).items():
        account = eth_account.Account.from_key(private_key)

        # slice off 0x for hex private keys
        env[f"{name}_PRIVATE_KEY"] = account.key.hex().replace("0x", "")
        env[f"{name}_ADDRESS"] = account.address

        if name.startswith("ETH_RELAYER_WALLET"):
            eth_relayer_wallets.append(
                {
                    "publicKey": account.address,
                    "privateKey": account.key.hex().replace("0x", ""),
                }
            )

        if name.startswith("POA_RELAYER_WALLET"):
            poa_relayer_wallets.append(
                {
                    "publicKey": account.address,
                    "privateKey": account.key.hex().replace("0x", ""),
                }
            )

    env["ETH_RELAYER_WALLETS"] = json.dumps(eth_relayer_wallets)
    env["POA_RELAYER_WALLETS"] = json.dumps(poa_relayer_wallets)

    bootstrap_sp_ids = []
    bootstrap_sp_owner_wallets = []
    for replica in range(creator_node_replicas):
        if f"CN{replica + 1}_SP_OWNER_ADDRESS" in env:
            bootstrap_sp_ids.append(str(replica + 1))
            bootstrap_sp_owner_wallets.append(env[f"CN{replica + 1}_SP_OWNER_ADDRESS"])
    env["BOOTSTRAP_SP_IDS"] = ",".join(bootstrap_sp_ids)
    env["BOOTSTRAP_SP_OWNER_WALLETS"] = ",".join(bootstrap_sp_owner_wallets)
    env["BOOTSTRAP_SP_DELEGATE_WALLETS"] = ",".join(bootstrap_sp_owner_wallets)

    aao_wallets = []
    for key, value in env.items():
        if key.startswith("AAO_WALLET_") and key.endswith("_ADDRESS"):
            aao_wallets.append(value)
    env["AAO_WALLET_ADDRESSES"] = ",".join(aao_wallets)

    for key, value in config.get("extra-env", {}).items():
        env[key] = value

    # generate config.env used by startup scripts
    env_file = protocol_dir / ".env"
    env_file.touch()
    env_file.write_text("# DO NOT EDIT THIS FILE\n")
    for key, value in env.items():
        dotenv.set_key(env_file, key, value)


@click.group()
@click.option(
    "--protocol-dir",
    envvar="PROTOCOL_DIR",
    type=click.Path(
        exists=True, file_okay=False, resolve_path=True, path_type=pathlib.Path
    ),
)
@click.pass_context
def cli(ctx, protocol_dir):
    if protocol_dir is None:
        protocol_dir = pathlib.Path.cwd().resolve()
        while (
            protocol_dir.name != ""
            and not (protocol_dir / "docker-compose.yml").exists()
        ):
            protocol_dir = protocol_dir.parent
        if protocol_dir.name == "":
            raise click.ClickException("Unable to find protocol dir")
        click.confirm(f'Using protocol dir "{protocol_dir}"', default=True, abort=True)

    ctx.obj = protocol_dir


@cli.command()
@click.option("-c", "--creator-node-replicas", default=4, type=int)
@click.option("-d", "--discovery-provider-replicas", default=3, type=int)
@click.option("-e", "--elasticsearch-replicas", default=0, type=int)
@click.pass_obj
def build(
    protocol_dir,
    creator_node_replicas,
    discovery_provider_replicas,
    elasticsearch_replicas,
):
    generate_env(
        protocol_dir,
        creator_node_replicas,
        discovery_provider_replicas,
        elasticsearch_replicas,
    )

    sys.exit(
        subprocess.run(
            [
                "docker",
                "compose",
                f"--project-directory={protocol_dir}",
                f"--file={protocol_dir / 'docker-compose.yml'}",
                "build",
            ],
        ).returncode
    )


@cli.command()
@click.argument("service")
@click.argument("name")
@click.argument("value")
@click.pass_obj
def set_env(protocol_dir, service, name, value):
    env_file = protocol_dir / f"dev-tools/startup/{service}.env"
    dotenv.set_key(env_file, name, value)


@cli.command()
@click.argument("service")
@click.argument("environment")
@click.pass_obj
def load_env(protocol_dir, service, environment):
    if not click.confirm(f"All existing env for {service} will be replaced continue?"):
        return

    replica = 1
    parts = service.split("-")
    if parts[-1].isdigit():
        service, replica = "-".join(parts[:-1]), int(parts[-1])

    env_file = protocol_dir / f"dev-tools/startup/{service}-{replica}.env"

    with urllib.request.urlopen(
        f"https://raw.githubusercontent.com/AudiusProject/audius-docker-compose/main/{service}/{environment}.env"
    ) as resp:
        env_file.write_bytes(resp.read())


@cli.command()
@click.option("-c", "--creator-node-replicas", default=3, type=int)
@click.option("-d", "--discovery-provider-replicas", default=3, type=int)
@click.option("-e", "--elasticsearch-replicas", default=0, type=int)
@click.option("-b", "--block-explorer", is_flag=True)
@click.option("-o", "--anti-abuse-oracle", is_flag=True)
@click.option("-w", "--wait", is_flag=True, help="Wait for services to be healthy")
@click.argument("services", nargs=-1)
@click.pass_obj
def up(
    protocol_dir,
    creator_node_replicas,
    discovery_provider_replicas,
    elasticsearch_replicas,
    block_explorer,
    anti_abuse_oracle,
    wait,
    services,
):
    generate_env(
        protocol_dir,
        creator_node_replicas,
        discovery_provider_replicas,
        elasticsearch_replicas,
    )

    AAO_DIR = pathlib.Path(os.getenv("AAO_DIR", protocol_dir / "../anti-abuse-oracle"))

    sys.exit(
        subprocess.run(
            [
                "docker",
                "compose",
                f"--project-directory={protocol_dir}",
                f"--file={protocol_dir / 'docker-compose.yml'}",
                *(
                    [f"--file={AAO_DIR / 'audius-compose.yml'}"]
                    if anti_abuse_oracle
                    else []
                ),
                *(["--profile=block-explorer"] if block_explorer else []),
                *(["--profile=elasticsearch"] if elasticsearch_replicas else []),
                "up",
                "--build",
                ("--wait" if wait else "--detach"),
                *services,
            ],
        ).returncode
    )


@cli.command()
@click.pass_obj
def down(protocol_dir):
    subprocess.run(
        [
            "docker",
            "compose",
            f"--project-directory={protocol_dir}",
            f"--file={protocol_dir / 'docker-compose.yml'}",
            "--profile=*",
            "down",
            "--remove-orphans",
            "--volumes",
        ],
    )


@cli.command()
@click.pass_obj
@click.option("-r", "--remote", is_flag=True)
def connect(protocol_dir, remote):
    remote_host = os.environ['AUDIUS_REMOTE_DEV_HOST']
    host = remote_host if remote else 'localhost'
    subprocess.run(
        [
            "sshuttle",
            "-N",
            "--no-latency-control",
            "-H",
            "-r",
            f"sshuttle@{host}:2222",
            "-e",
            f"ssh -i {protocol_dir}/dev-tools/keys/dev -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        ]
    )


@cli.group(cls=DefaultCommandGroup)
def test():
    pass


@test.command(name="build")
@click.pass_obj
def test_build(protocol_dir):
    generate_env(protocol_dir, 0, 0, 0)

    subprocess.run(
        [
            "docker",
            "compose",
            f"--file={protocol_dir / 'docker-compose.test.yml'}",
            f"--project-name={protocol_dir.name}-test",
            f"--project-directory={protocol_dir}",
            "build",
        ],
    )

    subprocess.run(
        [
            "docker",
            "compose",
            f"--file={protocol_dir / 'docker-compose.test.yml'}",
            f"--project-name={protocol_dir.name}-test",
            f"--project-directory={protocol_dir}",
            "pull",
        ],
    )


@test.command(name="run", default_command=True)
@click.argument("service")
@click.argument("args", nargs=-1, type=click.UNPROCESSED)
@click.pass_obj
def test_run(protocol_dir, service, args):
    """
    Runs tests for a given service.
    """
    generate_env(protocol_dir, 0, 0, 0)

    if service == "discovery-provider":
        cmd = "pytest"
    elif service == "creator-node":
        cmd = "npx mocha"
    elif service == "identity-service":
        cmd = "npx mocha"
    else:
        click.secho(
            "Invalid service specified",
            fg="red",
        )
        return

    sys.exit(
        subprocess.run(
            [
                "docker",
                "compose",
                f"--file={protocol_dir / 'docker-compose.test.yml'}",
                f"--project-name={protocol_dir.name}-test",
                f"--project-directory={protocol_dir}",
                "run",
                "--rm",
                f"test-{service}",
                cmd,
                *args,
            ]
        ).returncode
    )


@test.command(name="up")
@click.argument("service")
@click.pass_obj
def test_up(protocol_dir, service):
    """
    Brings up a testing container for a given service.
    """
    generate_env(protocol_dir, 0, 0, 0)

    sys.exit(
        subprocess.run(
            [
                "docker",
                "compose",
                f"--file={protocol_dir / 'docker-compose.test.yml'}",
                f"--project-name={protocol_dir.name}-test",
                f"--project-directory={protocol_dir}",
                "up",
                "--build",
                "-d",
                f"test-{service}"
            ]
        ).returncode
    )


@test.command(name="down")
@click.pass_obj
def test_down(protocol_dir):
    generate_env(protocol_dir, 0, 0, 0)

    subprocess.run(
        [
            "docker",
            "compose",
            f"--file={protocol_dir / 'docker-compose.test.yml'}",
            f"--project-name={protocol_dir.name}-test",
            f"--project-directory={protocol_dir}",
            "--profile=*",
            "down",
            "-v",
        ],
    )


@cli.command()
@click.argument("service")
@click.argument("command")
@click.argument("args", nargs=-1)
@click.pass_obj
def exec(protocol_dir, service, command, args):
    index = 1
    split = service.rsplit("-", 1)
    if split[-1].isdigit():
        service, index = split

    subprocess.run(
        [
            "docker",
            "compose",
            f"--project-directory={protocol_dir}",
            "exec",
            "--index",
            str(index),
            service,
            "sh",
            "-c",
            # Ugly command since this needs run on all containers (i.e. posix compliant)
            r'''eval $(od -An -to1 -v /proc/1/environ | tr -d '\n' | sed 's/ 000/\n/g; s/ /\\/g; s/[^\n]\+/export "`printf "&"`"/g'); exec "$@"''',
            # r'''eval $(xargs -0 -n1 sh -c 'echo $0 | sed "'"s/'/'\\\\\''/g; s/.*/export '&'/"'"' </proc/1/environ); exec "$@"''',
            "-",
            command,
            *args,
        ],
    )


@cli.command()
@click.pass_obj
def ps(protocol_dir):
    AAO_DIR = pathlib.Path(os.getenv("AAO_DIR", protocol_dir / "../anti-abuse-oracle"))

    proc = subprocess.run(
        [
            "docker",
            "compose",
            f"--project-directory={protocol_dir}",
            f"--file={protocol_dir / 'docker-compose.yml'}",
            *([f"--file={AAO_DIR / 'audius-compose.yml'}"] if AAO_DIR.exists() else []),
            "ps",
            "--format=json",
        ],
        capture_output=True,
    )

    if proc.returncode != 0:
        raise click.ClickException(proc.stderr.decode())

    services = json.loads(proc.stdout.decode())
    services.sort(key=lambda x: x["Name"])

    print(
        "CONTAINER ID".ljust(13),
        "NAME".ljust(35),
        "STATUS".ljust(10),
        "PORTS",
    )

    for service in services:
        if service["Service"] == "port-forwarder":
            continue

        name = service["Service"]
        replica = int(service["Name"].split("-")[-1])
        status = service["Health"] or service["State"]

        ports = {}
        if service["Publishers"]:
            for publisher in service["Publishers"]:
                if publisher["PublishedPort"]:
                    ports[publisher["PublishedPort"]] = publisher["TargetPort"]

        if service["Service"] == "creator-node":
            name = f"{service['Service']}-{replica}"
            ports[4000 + replica - 1] = 4000
        if service["Service"] == "discovery-provider":
            name = f"{service['Service']}-{replica}"
            ports[5000 + replica - 1] = 5000
        if service["Service"] == "discovery-provider-elasticsearch":
            name = f"{service['Service']}-{replica}"

        ports = sorted(ports.items())
        ports = ", ".join(f"{target}->{published}" for target, published in ports)

        print(
            service["ID"][:12].ljust(13),
            name.ljust(35),
            status.ljust(10),
            ports,
        )


@cli.command()
@click.option("-y", "--yes", is_flag=True)
@click.pass_obj
def prune(protocol_dir, yes):
    click.secho(
        "WARNING! This will remove all dangling images and build cache not used within the last 72h",
        fg="yellow",
    )

    if yes or click.confirm("Are you sure you want to continue?"):
        subprocess.run(["docker", "image", "prune", "-f"])
        subprocess.run(["docker", "buildx", "prune", "-f", "--filter=until=72h"])


@cli.command()
@click.argument("service")
@click.pass_obj
def logs(protocol_dir, service):
    subprocess.run(
        [
            "docker",
            "compose",
            f"--project-directory={protocol_dir}",
            f"--file={protocol_dir / 'docker-compose.yml'}",
            "logs",
            service,
        ],
    )


if __name__ == "__main__":
    cli()
